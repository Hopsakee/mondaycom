"""Functions to make the use of Monday.com even easier for Jelle."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['apiKey', 'apiUrl', 'headers', 'query_sprint_tasks', 'query_board_columns', 'query_board_items', 'r', 'get_data',
           'get_items', 'item_to_markdown']

# %% ../../nbs/00_core.ipynb 3
import requests
import json
import os
from dotenv import load_dotenv
from textwrap import dedent

# %% ../../nbs/00_core.ipynb 5
load_dotenv()
apiKey = os.environ["API_KEY_MONDAY"]
apiUrl = "https://api.monday.com/v2"
headers = {"Authorization": f"Bearer {apiKey}", "API-Version": "2023-04"}

# %% ../../nbs/00_core.ipynb 12
query_sprint_tasks = dedent("""
    query {
        items_page_by_column_values(
            board_id:757790388,
  	        columns:[
                {column_id: "person", column_values: ["Jelle de Jong"]},
                {column_id: "status_stories", column_values: ["To Do", "Working on it", "Wacht op Antwoord", "Wacht op review"]}
                ]) {
            items {
                id
                name
                column_values(ids:["status_stories","numbers5","date7", "story_syntax"]) {
                    id
                    text
                }
            }
        }
    }""").strip()

# %% ../../nbs/00_core.ipynb 14
query_board_columns = dedent("""
    query {
        board(
            ids:757790388
        ) {
            columns {
                id
                title
            }
        }
    }""").strip()

# %% ../../nbs/00_core.ipynb 16
query_board_items = dedent("""
    query {
        items_page_by_column_values(
            board_id:757790388,
  	        columns:[
                {column_id: "person", column_values: ["Jelle de Jong"]},
                {column_id: "status_stories", column_values: ["To Do", "Working on it", "Wacht op Antwoord", "Wacht op review"]}
                ]) {
            items {
                id
                name
                column_values(ids:["status_stories","numbers5","date7", "story_syntax"]) {
                    id
                    text
                }
            }
        }
    }""").strip()

# %% ../../nbs/00_core.ipynb 18
def get_data(
    query: str,  # GraphQL query
    api_url: str = apiUrl,  # Monday.com API url
    headers: dict = headers,  # Monday.com API headers
) -> dict:  # response from Monday.com API
    data = {"query": query}
    return requests.post(url=apiUrl, json=data, headers=headers)

# %% ../../nbs/00_core.ipynb 19
r = get_data(query_sprint_tasks)
r.json()

# %% ../../nbs/00_core.ipynb 22
def get_items(
    response: requests.models.Response,  # response from Monday.com API
    skip_keys: list = ["data", "items_page_by_column_values", "items"],  # list of key values in the response to skip
) -> list:  # list of items
    return [item for item in response.json().values() if not any(key in item for key in skip_keys)]

# %% ../../nbs/00_core.ipynb 23
def item_to_markdown(
    item: str,  # json formatted string response from Monday.com API
) -> str:  # Task formatted as Markdown for Obsidian
    """Convert Monday.com item to Markdown task format"""
    # Extract the basic fields
    name = item["name"]

    # Extract values from column_values
    for col in item["column_values"]:
        if col["id"] == "numbers5":
            try:
                duration = int(col["text"]) * 120
            except ValueError:
                duration = 0
        elif col["id"] == "date7":
            date = col["text"]

    # Build the markdown string
    markdown = f"- [ ] {name}"

    # Add duration if present
    if duration > 0:
        markdown += f" [{duration}m]"

    # Add priority emoji and date if present
    markdown += " ⏫"  # Priority marker
    if date:
        markdown += f" 📅 {date}"

    return markdown

# %% ../../nbs/00_core.ipynb 24
for item in r.json()["data"]["items_page_by_column_values"]["items"]:
    print(item_to_markdown(item))
